createdAt: "2018-10-17T23:44:30.487Z"
updatedAt: "2018-12-06T00:55:55.035Z"
type: "MARKDOWN_NOTE"
folder: "00f6276eea4c5c719915"
title: "django数据库操作1"
content: '''
  # django数据库操作1
  ### 1.数据库操作
  ```python
  from django.db import models
     
  class userinfo(models.Model):
      #如果没有models.AutoField，默认会创建一个id的自增列
      name = models.CharField(max_length=30)
      email = models.EmailField()
      memo = models.TextField()
  ```
  1、models.AutoField　　自增列= int(11)
  　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。
  2、models.CharField　　字符串字段
  　　必须 max_length 参数
  3、models.BooleanField　　布尔类型=tinyint(1)
  　　不能为空，Blank=True
  4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar
  　　继承CharField，所以必须 max_lenght 参数
  5、models.DateField　　日期类型 date
  　　对于参数，auto_now =True则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。
  6、models.DateTimeField　　日期类型 datetime
  　　同DateField的参数
  7、models.Decimal　　十进制小数类型= decimal
  　　必须指定整数位max_digits和小数位decimal_places
  8、models.EmailField　　字符串类型（正则表达式邮箱）=varchar
  　　对字符串进行正则表达式
  9、models.FloatField　　浮点类型= double
  10、models.IntegerField　　整形
  11、models.BigIntegerField　　长整形
  　　integer_field_ranges ={
  　　　　'SmallIntegerField':(-32768,32767),
  　　　　'IntegerField':(-2147483648,2147483647),
  　　　　'BigIntegerField':(-9223372036854775808,9223372036854775807),
  　　　　'PositiveSmallIntegerField':(0,32767),
  　　　　'PositiveIntegerField':(0,2147483647),
  　　}
  12、models.IPAddressField　　字符串类型（ip4正则表达式）
  13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）
  　　参数protocol可以是：both、ipv4、ipv6
  　　验证时，会根据设置报错
  14、models.NullBooleanField　　允许为空的布尔类型
  15、models.PositiveIntegerFiel　　正Integer
  16、models.PositiveSmallIntegerField　　正smallInteger
  17、models.SlugField　　减号、下划线、字母、数字
  18、models.SmallIntegerField　　数字
  　　数据库中的字段有：tinyint、smallint、int、bigint
  19、models.TextField　　字符串=longtext
  20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]
  21、models.URLField　　字符串，地址正则表达式
  22、models.BinaryField　　二进制
  23、models.ImageField图片
  24、models.FilePathField文件
  
  
  1、null=True
  　　数据库中字段是否可以为空
  2、blank=True
  　　django的Admin中添加数据时是否可允许空值
  3、primary_key =False
  　　主键，对AutoField设置主键后，就会代替原来的自增 id 列
  4、auto_now 和 auto_now_add
  　　auto_now 自动创建---无论添加或修改，都是当前操作的时间
  　　auto_now_add 自动创建---永远是创建时的时间
  5、choices
  GENDER_CHOICE =(
  (u'M', u'Male'),
  (u'F', u'Female'),
  )
  gender = models.CharField(max_length=2,choices = GENDER_CHOICE)
  6、max_length
  7、default　　默认值
  8、verbose_name　　Admin中字段的显示名称
  9、name|db_column　　数据库中的字段名称
  10、unique=True　　不允许重复
  11、db_index =True　　数据库索引
  12、editable=True　　在Admin里是否可编辑
  13、error_messages=None　　错误提示
  14、auto_created=False　　自动创建
  15、help_text　　在Admin中提示帮助信息
  16、validators=[]
  17、upload-to
  
  增删改查操作说明 
  对数据进行增删改查
  查
  ```python
  models.UserInfo.objects.all()
  models.UserInfo.objects.all().values('user')    #只取user列
  models.UserInfo.objects.all().values_list('id','user')    #取出id和user列，并生成一个列表
  models.UserInfo.objects.get(id=1)
  models.UserInfo.objects.get(user='yangmv')
  ```
  增
  ```python
  models.UserInfo.objects.create(user='yangmv',pwd='123456')
  或者
  obj = models.UserInfo(user='yangmv',pwd='123456')
  obj.save()
  或者
  dic = {'user':'yangmv','pwd':'123456'}
  models.UserInfo.objects.create(**dic)
  ```
  改
  ```python 
  models.UserInfo.objects.filter(user='yangmv').update(pwd='520')
  或者
  obj = models.UserInfo.objects.get(user='yangmv')
  obj.pwd = '520'
  obj.save()
  ```
  
  删
  ```python
  models.UserInfo.objects.filter(user='yangmv').delete()
  ```
  
  #### 常用方法
  
      # 获取个数
      #
      # models.Tb1.objects.filter(name='seven').count()
      # 大于，小于
      #
      # models.Tb1.objects.filter(id__gt=1)              # 获取id大于1的值
      # models.Tb1.objects.filter(id__lt=10)             # 获取id小于10的值
      # models.Tb1.objects.filter(id__lt=10, id__gt=1)   # 获取id大于1 且 小于10的值
      # in
      #
      # models.Tb1.objects.filter(id__in=[11, 22, 33])   # 获取id等于11、22、33的数据
      # models.Tb1.objects.exclude(id__in=[11, 22, 33])  # not in
      # contains
      #
      # models.Tb1.objects.filter(name__contains="ven")
      # models.Tb1.objects.filter(name__icontains="ven") # icontains大小写不敏感
      # models.Tb1.objects.exclude(name__icontains="ven")
      # range
      #
      # models.Tb1.objects.filter(id__range=[1, 2])   # 范围bettwen and
      # 其他类似
      #
      # startswith，istartswith, endswith, iendswith,
      # order by
      #
      # models.Tb1.objects.filter(name='seven').order_by('id')    # asc
      # models.Tb1.objects.filter(name='seven').order_by('-id')   # desc
      # limit 、offset
      #
      # models.Tb1.objects.all()[10:20]
      # group by
      from django.db.models import Count, Min, Max, Sum
      # models.Tb1.objects.filter(c1=1).values('id').annotate(c=Count('num'))
      # SELECT "app01_tb1"."id", COUNT("app01_tb1"."num") AS "c" FROM "app01_tb1" WHERE "app01_tb1"."c1" = 1 GROUP BY "app01_tb1"."id"
  
  #### 2.常用字段
  * models.DateTimeField　　日期类型 datetime
  参数，
  auto_now = True ：则每次更新都会更新这个时间
  auto_now_add 则只是第一次创建添加，之后的更新不再改变。
  
  ```python       
  class UserInfo(models.Model):
      name = models.CharField(max_length=32)
      ctime = models.DateTimeField(auto_now=True)
      uptime = models.DateTimeField(auto_now_add=True)
  
  from web import models
  def home(request):
      models.UserInfo.objects.create(name='yangmv')
      after = models.UserInfo.objects.all()
      print after[0].ctime
      return render(request, 'home\\home.html')
    ```
    
  * models.ImageField                        图片
  * models.GenericIPAddressField      IP
  ~~~
  ip = models.GenericIPAddressField(protocol="ipv4",null=True,blank=True)
  img = models.ImageField(null=True,blank=True,upload_to="upload")
  ~~~
  
  常用参数
  选择下拉框 choices
  ```python
  class UserInfo(models.Model):
      USER_TYPE_LIST = (
          (1,'user'),
  		(2,'admin'),
  		)
    ```
  ~~~
   user_type = models.IntegerField(choices=USER_TYPE_LIST,default=1)
  ~~~
  
  
  2、连表结构
  
  * 一对多：models.ForeignKey(其他表)
  * 多对多：models.ManyToManyField(其他表)
  * 一对一：models.OneToOneField(其他表)
  
  应用场景：
  > * 1.一对多：当一张表中创建一行数据时，有一个单选的下拉框（可以被重复选择）
  例如：创建用户信息时候，需要选择一个用户类型【普通用户】【金牌用户】【铂金用户】等。
  To define a many-to-one relationship, use ForeignKey:
  
  > * 2.多对多：在某表中创建一行数据是，有一个可以多选的下拉框
  例如：创建用户信息，需要为用户指定多个爱好
  > * 3.一对一：在某表中创建一行数据时，有一个单选的下拉框（下拉框中的内容被用过一次就消失了）
  或者一个系统登录帐户信息表、用户个人信息表，这两个表之间一对一的，一个系统登录帐户只能对应一个用户。
  例如：原有含10列数据的一张表保存相关信息，经过一段时间之后，10列无法满足需求，需要为原来的表再添加5列数据
  
   一对多：
   ```python
  class Game(models.Model):
      gname = models.CharField(max_length=32)
   
  class Host(models.Model):
      hostname = models.CharField(max_length=32)
      game = models.ForeignKey('Game')
  ```
  多对多：
  ```python
  class UserGroup(models.Model):
      group_name = models.CharField(max_length=16)
   
  class User(models.Model):
      name = models.CharField(max_length=16)
      sex = models.CharField(max_length=16)
      email = models.EmailField(max_length=32)
      usergroup_user = models.ManyToManyField('UserGroup')
  ```
  Django model会自动创建第3张关系表，用于对应user id 和usergroup id
  
  一对一：   （一对多增加了不能重复）
  ```pthon
  class User2(models.Model):
      name = models.CharField(max_length=16)
      sex = models.CharField(max_length=16)
      email = models.EmailField(max_length=32)
   
  class Admin(models.Model):
      username = models.CharField(max_length=32)
      password = models.CharField(max_length=32)
      admin_user2 = models.OneToOneField('User2')
  ```
  
  具体可参考 [Django-Model操作数据库(增删改查、连表结构） - RootMe - 博客园](https:\\\\www.cnblogs.com\\yangmv\\p\\5327477.html)
  【特别说明】
  ```python
  #===========================================================
  class Place(models.Model):
      name = models.CharField(max_length=50)
      address = models.CharField(max_length=80)
  
      def __str__(self):              # __unicode__ on Python 2
          return "%s the place" % self.name
  
  class Restaurant(models.Model):
      # 在表中创建了一个字段 place_id 关联 Place 表
      place = models.OneToOneField(
          Place,
          on_delete=models.CASCADE,
          primary_key=True,
      )
      serves_hot_dogs = models.BooleanField(default=False)
      serves_pizza = models.BooleanField(default=False)
  
      def __str__(self):              # __unicode__ on Python 2
          return "%s the restaurant" % self.place.name
  
  class Waiter(models.Model):
      #在表中创建了一个字段 restaurant_id 关联 Restaurant 表
      restaurant = models.ForeignKey(Restaurant, on_delete=models.CASCADE)
      name = models.CharField(max_length=50)
  
      def __str__(self):              # __unicode__ on Python 2
          return "%s the waiter at %s" % (self.name, self.restaurant)
        
  ```
  ```python
  class User(models.Model):
      """用户表"""
      user_name = models.CharField(max_length=32,unique=True)
      ready_name = models.CharField(max_length=64, null=True)
      passwd = models.CharField(max_length=256,null=True)
      email = models.CharField(max_length=64,null=True)
      phone = models.CharField(max_length=128,null=True)
      role = models.ManyToManyField(to="Role")
      img = models.ImageField(upload_to='img',null=True)
      status = models.CharField(max_length=64,default="离线")
      creat_time = models.DateTimeField(auto_now_add=True)
      last_login = models.DateTimeField(auto_now=True)
      def __unicode__(self):
          return self.user_name
        
    class Role(models.Model):
      """角色表"""
      role_title = models.CharField(max_length=64,unique=True)
      role_msg = models.CharField(max_length=128,null=True)
  ```
  以上相当于创建了一个第三方表user_role
  id
  user_id
  role_id
  
  
  获取WEB提交过来的值
  ```python
  if request.POST:
              a= request.POST.get('a', 0)
              b = request.POST.get('b', 0)
              # 判断参数中是否含有a和b
              if a and b:
                  res = add_args(a, b)
                  dic['number'] = res
                  dic = json.dumps(dic)
                  return HttpResponse(dic)
              else:
                  return HttpResponse('输入错误')
  ```
  
  接收数组
  ```javascript
  $.ajax({
              cache: false,
              type: "POST",
              url: "\\userdelete\\",
              traditional:true,  \\\\加上此项可以传数组
              dataType:'json',
              async: true,
              data:{ids:data},  \\\\<QueryDict: {'ids': ['40', '39', '33', '31', '29', '28']}>
              success: function(data) {
                  if (data.status == 'success') {
                      $table.bootstrapTable('remove', {field: 'id', values: ids});
                  } 
              },
              beforeSend: function(xhr, settings) {
                  xhr.setRequestHeader("X-CSRFToken", csrftoken);
              }
    });
  
  ```
  ```python
  if request.is_ajax():
          if request.method == 'POST': 
              array = request.POST.getlist('ids')  #django接收数组 
              for i in array:
                 p = UserProfile.objects.get(id=i)
                 p.delete() 
          return HttpResponse('{"status":"success"}', content_type='application\\json')
  ```
  > 说明:
  > 当参数为'a=1&a=2&a=3' 
  > request.POST.get('a') –>3 只能获取数组中的最后一个
  > request.POST.getlist('a') –>[1,2,3]可以获取到数组
'''
tags: []
isStarred: false
isTrashed: false
